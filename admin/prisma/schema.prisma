datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Client {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  clientType               String
  email                    String   @unique
  phoneNumber              String
  secondaryPhoneNumber     String?
  address                  String?
  preferredCommunication   String?
  notes                    String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  tasks                    Task[]

  // Individual Fields
  firstName       String?
  lastName        String?
  gender          String?
  dateOfBirth     DateTime?
  idProofType     String?
  idProofNumber   String?

  // Organization Fields
  organizationName     String?
  registrationNumber   String?
  entityType           String?
  incorporationDate    DateTime?
  gstNumber            String?
  authorizedPersonName String?
  designation          String?
  contactEmail         String?
}

model Agent {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String   @unique
  phoneNumber           String
  secondaryPhoneNumber  String?
  agentType             String
  barAssociationId      String
  jurisdiction          String
  specializations       String[]
  photo                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Team Management
  superiorId   String?  @db.ObjectId
  superior     Agent?   @relation("AgentHierarchy", fields: [superiorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates Agent[]  @relation("AgentHierarchy")
  createdTasks Task[]     @relation("CreatedTasks")
  assignedTasks Task[]    @relation("AssignedTasks")
  comments     Comment[]  @relation("CommentAuthor")
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      String   @default("To Do") // e.g., To Do, In Progress, Done
  priority    String   @default("Medium") // e.g., Low, Medium, High
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clientId String? @db.ObjectId
  client   Client? @relation(fields: [clientId], references: [id])

  createdById String?  @db.ObjectId
  createdBy   Agent?   @relation("CreatedTasks", fields: [createdById], references: [id])

  assignedToId String? @db.ObjectId
  assignedTo   Agent?  @relation("AssignedTasks", fields: [assignedToId], references: [id])

  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // File attachment fields
  attachmentName String?
  attachmentUrl  String?
  attachmentSize Int?
  attachmentType String?

  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  authorId String @db.ObjectId
  author   Agent  @relation("CommentAuthor", fields: [authorId], references: [id])
}